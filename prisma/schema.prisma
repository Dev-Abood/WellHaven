// Link the provider and client
generator client {
  provider = "prisma-client-js"
}

// Using MongoDB provider for CosmosDB
datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Enums
enum Goal {
  REDUCE_STRESS
  AI_THERAPY
  COPE_WITH_TRAUMA
  BE_BETTER_PERSON
  TRYING_OUT
}

enum Gender {
  MALE
  FEMALE
}

enum SleepQuality {
  WORST
  POOR
  FAIR
  GOOD
  EXCELLENT
}

enum Mood {
  SAD
  OVERJOYED
  HAPPY
  NEUTRAL
  DEPRESSED
}

// Models
model User {
  id                      String     @id @map("_id") // Using Clerk auth ID
  goal                    Goal
  gender                  Gender?
  age                     Int?
  weight                  Float?
  soughtProfessionalHelp  Boolean
  experiencedPhysicalDistress Boolean
  medications             String[]
  wantsMedicationReminders Boolean
  mentalHealthSymptoms    String[]
  selfDescriptions        String[]
  initialStressLevel      Int        @db.Int // 1-5
  initialSleepQuality     SleepQuality
  initialMood             Mood
  createdAt               DateTime   @default(now())
  updatedAt               DateTime   @updatedAt
  
  // Relations
  journals                Journal[]
  chatSessions            ChatSession[]
}

model Journal {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  stressLevel Int        @db.Int // 1-5
  mood        Mood
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Relations
  user        User       @relation(fields: [userId], references: [id])
  userId      String
}

model ChatSession {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  name        String
  
  // Relations
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  messages    ChatMessage[]
}

model ChatMessage {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  content       String
  isFromUser    Boolean    // true if user sent it, false if AI sent it
  createdAt     DateTime   @default(now())
  
  // Relations
  chatSession   ChatSession @relation(fields: [chatSessionId], references: [id], onDelete: Cascade)
  chatSessionId String      @db.ObjectId
}
